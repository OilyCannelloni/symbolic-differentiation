//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\barte\RiderProjects\SymbolicDifferentiation\SymbolicDifferentiation\DiffGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SymbolicDifferentiation {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IDiffGrammarListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DiffGrammarBaseListener : IDiffGrammarListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstOp</c>
	/// labeled alternative in <see cref="DiffGrammarParser.const"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstOp([NotNull] DiffGrammarParser.ConstOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstOp</c>
	/// labeled alternative in <see cref="DiffGrammarParser.const"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstOp([NotNull] DiffGrammarParser.ConstOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>ConstAtom</c>
	/// labeled alternative in <see cref="DiffGrammarParser.const"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstAtom([NotNull] DiffGrammarParser.ConstAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstAtom</c>
	/// labeled alternative in <see cref="DiffGrammarParser.const"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstAtom([NotNull] DiffGrammarParser.ConstAtomContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>ConstParen</c>
	/// labeled alternative in <see cref="DiffGrammarParser.const"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstParen([NotNull] DiffGrammarParser.ConstParenContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstParen</c>
	/// labeled alternative in <see cref="DiffGrammarParser.const"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstParen([NotNull] DiffGrammarParser.ConstParenContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>ExprSum</c>
	/// labeled alternative in <see cref="DiffGrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprSum([NotNull] DiffGrammarParser.ExprSumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ExprSum</c>
	/// labeled alternative in <see cref="DiffGrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprSum([NotNull] DiffGrammarParser.ExprSumContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>ExprTerm</c>
	/// labeled alternative in <see cref="DiffGrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprTerm([NotNull] DiffGrammarParser.ExprTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ExprTerm</c>
	/// labeled alternative in <see cref="DiffGrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprTerm([NotNull] DiffGrammarParser.ExprTermContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>TermFactor</c>
	/// labeled alternative in <see cref="DiffGrammarParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermFactor([NotNull] DiffGrammarParser.TermFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TermFactor</c>
	/// labeled alternative in <see cref="DiffGrammarParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermFactor([NotNull] DiffGrammarParser.TermFactorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>TermDivFactor</c>
	/// labeled alternative in <see cref="DiffGrammarParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermDivFactor([NotNull] DiffGrammarParser.TermDivFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TermDivFactor</c>
	/// labeled alternative in <see cref="DiffGrammarParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermDivFactor([NotNull] DiffGrammarParser.TermDivFactorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>TermTimesFactor</c>
	/// labeled alternative in <see cref="DiffGrammarParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermTimesFactor([NotNull] DiffGrammarParser.TermTimesFactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TermTimesFactor</c>
	/// labeled alternative in <see cref="DiffGrammarParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermTimesFactor([NotNull] DiffGrammarParser.TermTimesFactorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>FactAtom</c>
	/// labeled alternative in <see cref="DiffGrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactAtom([NotNull] DiffGrammarParser.FactAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FactAtom</c>
	/// labeled alternative in <see cref="DiffGrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactAtom([NotNull] DiffGrammarParser.FactAtomContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>FactPow</c>
	/// labeled alternative in <see cref="DiffGrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactPow([NotNull] DiffGrammarParser.FactPowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FactPow</c>
	/// labeled alternative in <see cref="DiffGrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactPow([NotNull] DiffGrammarParser.FactPowContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>AtomVar</c>
	/// labeled alternative in <see cref="DiffGrammarParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtomVar([NotNull] DiffGrammarParser.AtomVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomVar</c>
	/// labeled alternative in <see cref="DiffGrammarParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtomVar([NotNull] DiffGrammarParser.AtomVarContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>AtomConst</c>
	/// labeled alternative in <see cref="DiffGrammarParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtomConst([NotNull] DiffGrammarParser.AtomConstContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomConst</c>
	/// labeled alternative in <see cref="DiffGrammarParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtomConst([NotNull] DiffGrammarParser.AtomConstContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>AtomNum</c>
	/// labeled alternative in <see cref="DiffGrammarParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtomNum([NotNull] DiffGrammarParser.AtomNumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomNum</c>
	/// labeled alternative in <see cref="DiffGrammarParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtomNum([NotNull] DiffGrammarParser.AtomNumContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>AtomParenExpr</c>
	/// labeled alternative in <see cref="DiffGrammarParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtomParenExpr([NotNull] DiffGrammarParser.AtomParenExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AtomParenExpr</c>
	/// labeled alternative in <see cref="DiffGrammarParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtomParenExpr([NotNull] DiffGrammarParser.AtomParenExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DiffGrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] DiffGrammarParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DiffGrammarParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] DiffGrammarParser.ExprContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DiffGrammarParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] DiffGrammarParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DiffGrammarParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] DiffGrammarParser.TermContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DiffGrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor([NotNull] DiffGrammarParser.FactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DiffGrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor([NotNull] DiffGrammarParser.FactorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DiffGrammarParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtom([NotNull] DiffGrammarParser.AtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DiffGrammarParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtom([NotNull] DiffGrammarParser.AtomContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DiffGrammarParser.const"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConst([NotNull] DiffGrammarParser.ConstContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DiffGrammarParser.const"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConst([NotNull] DiffGrammarParser.ConstContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace SymbolicDifferentiation
