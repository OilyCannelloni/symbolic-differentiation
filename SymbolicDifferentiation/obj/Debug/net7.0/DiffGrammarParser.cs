//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\barte\RiderProjects\SymbolicDifferentiation\SymbolicDifferentiation\DiffGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SymbolicDifferentiation {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DiffGrammarParser : Parser {
	public const int
		NUM=1, VAR=2, LPAREN=3, RPAREN=4, PLUS=5, MINUS=6, TIMES=7, DIV=8, POINT=9, 
		POW=10, WS=11;
	public const int
		RULE_expr = 0, RULE_term = 1, RULE_factor = 2, RULE_atom = 3, RULE_const = 4;
	public static readonly string[] ruleNames = {
		"expr", "term", "factor", "atom", "const"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'x'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'.'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUM", "VAR", "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", 
		"POINT", "POW", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DiffGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DiffGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprSumContext : ExprContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(DiffGrammarParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(DiffGrammarParser.MINUS, 0); }
		public ExprSumContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterExprSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitExprSum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_expr);
		int _la;
		try {
			State = 15;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				_localctx = new ExprSumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 10; term();
				State = 11;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 12; expr();
				}
				break;

			case 2:
				_localctx = new ExprTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 14; term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermFactorContext : TermContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public TermFactorContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterTermFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitTermFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermDivFactorContext : TermContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV() { return GetToken(DiffGrammarParser.DIV, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermDivFactorContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterTermDivFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitTermDivFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermDivFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermTimesFactorContext : TermContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode TIMES() { return GetToken(DiffGrammarParser.TIMES, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermTimesFactorContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterTermTimesFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitTermTimesFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermTimesFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_term);
		try {
			State = 26;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				_localctx = new TermTimesFactorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 17; factor();
				State = 18; Match(TIMES);
				State = 19; term();
				}
				break;

			case 2:
				_localctx = new TermDivFactorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 21; factor();
				State = 22; Match(DIV);
				State = 23; term();
				}
				break;

			case 3:
				_localctx = new TermFactorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 25; factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactAtomContext : FactorContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public FactAtomContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterFactAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitFactAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactPowContext : FactorContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ITerminalNode POW() { return GetToken(DiffGrammarParser.POW, 0); }
		public FactPowContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterFactPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitFactPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactPow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_factor);
		try {
			State = 33;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				_localctx = new FactPowContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 28; atom();
				State = 29; Match(POW);
				State = 30; atom();
				}
				break;

			case 2:
				_localctx = new FactAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 32; atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomVarContext : AtomContext {
		public ITerminalNode VAR() { return GetToken(DiffGrammarParser.VAR, 0); }
		public AtomVarContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterAtomVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitAtomVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomConstContext : AtomContext {
		public ITerminalNode LPAREN() { return GetToken(DiffGrammarParser.LPAREN, 0); }
		public ConstContext @const() {
			return GetRuleContext<ConstContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(DiffGrammarParser.RPAREN, 0); }
		public AtomConstContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterAtomConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitAtomConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomNumContext : AtomContext {
		public ITerminalNode NUM() { return GetToken(DiffGrammarParser.NUM, 0); }
		public AtomNumContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterAtomNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitAtomNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomParenExprContext : AtomContext {
		public ITerminalNode LPAREN() { return GetToken(DiffGrammarParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(DiffGrammarParser.RPAREN, 0); }
		public AtomParenExprContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterAtomParenExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitAtomParenExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_atom);
		try {
			State = 45;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				_localctx = new AtomVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 35; Match(VAR);
				}
				break;

			case 2:
				_localctx = new AtomNumContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 36; Match(NUM);
				}
				break;

			case 3:
				_localctx = new AtomConstContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 37; Match(LPAREN);
				State = 38; @const(0);
				State = 39; Match(RPAREN);
				}
				break;

			case 4:
				_localctx = new AtomParenExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 41; Match(LPAREN);
				State = 42; expr();
				State = 43; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstContext : ParserRuleContext {
		public ConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const; } }
	 
		public ConstContext() { }
		public virtual void CopyFrom(ConstContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstOpContext : ConstContext {
		public ConstContext[] @const() {
			return GetRuleContexts<ConstContext>();
		}
		public ConstContext @const(int i) {
			return GetRuleContext<ConstContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(DiffGrammarParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(DiffGrammarParser.MINUS, 0); }
		public ITerminalNode TIMES() { return GetToken(DiffGrammarParser.TIMES, 0); }
		public ITerminalNode DIV() { return GetToken(DiffGrammarParser.DIV, 0); }
		public ITerminalNode POW() { return GetToken(DiffGrammarParser.POW, 0); }
		public ConstOpContext(ConstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterConstOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitConstOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstAtomContext : ConstContext {
		public ITerminalNode NUM() { return GetToken(DiffGrammarParser.NUM, 0); }
		public ConstAtomContext(ConstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterConstAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitConstAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstParenContext : ConstContext {
		public ITerminalNode LPAREN() { return GetToken(DiffGrammarParser.LPAREN, 0); }
		public ConstContext @const() {
			return GetRuleContext<ConstContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(DiffGrammarParser.RPAREN, 0); }
		public ConstParenContext(ConstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.EnterConstParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDiffGrammarListener typedListener = listener as IDiffGrammarListener;
			if (typedListener != null) typedListener.ExitConstParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffGrammarVisitor<TResult> typedVisitor = visitor as IDiffGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstParen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstContext @const() {
		return @const(0);
	}

	private ConstContext @const(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConstContext _localctx = new ConstContext(_ctx, _parentState);
		ConstContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_const, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPAREN:
				{
				_localctx = new ConstParenContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 48; Match(LPAREN);
				State = 49; @const(0);
				State = 50; Match(RPAREN);
				}
				break;
			case NUM:
				{
				_localctx = new ConstAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 52; Match(NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 60;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConstOpContext(new ConstContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_const);
					State = 55;
					if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
					State = 56;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << TIMES) | (1L << DIV) | (1L << POW))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 57; @const(4);
					}
					} 
				}
				State = 62;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return const_sempred((ConstContext)_localctx, predIndex);
		}
		return true;
	}
	private bool const_sempred(ConstContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\r\x42\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x5\x2\x12\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x5\x3\x1D\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4$\n\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x30\n\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x38\n\x6\x3\x6\x3\x6\x3\x6\a\x6"+
		"=\n\x6\f\x6\xE\x6@\v\x6\x3\x6\x2\x2\x3\n\a\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\x2\x4\x3\x2\a\b\x4\x2\a\n\f\f\x45\x2\x11\x3\x2\x2\x2\x4\x1C\x3\x2\x2"+
		"\x2\x6#\x3\x2\x2\x2\b/\x3\x2\x2\x2\n\x37\x3\x2\x2\x2\f\r\x5\x4\x3\x2\r"+
		"\xE\t\x2\x2\x2\xE\xF\x5\x2\x2\x2\xF\x12\x3\x2\x2\x2\x10\x12\x5\x4\x3\x2"+
		"\x11\f\x3\x2\x2\x2\x11\x10\x3\x2\x2\x2\x12\x3\x3\x2\x2\x2\x13\x14\x5\x6"+
		"\x4\x2\x14\x15\a\t\x2\x2\x15\x16\x5\x4\x3\x2\x16\x1D\x3\x2\x2\x2\x17\x18"+
		"\x5\x6\x4\x2\x18\x19\a\n\x2\x2\x19\x1A\x5\x4\x3\x2\x1A\x1D\x3\x2\x2\x2"+
		"\x1B\x1D\x5\x6\x4\x2\x1C\x13\x3\x2\x2\x2\x1C\x17\x3\x2\x2\x2\x1C\x1B\x3"+
		"\x2\x2\x2\x1D\x5\x3\x2\x2\x2\x1E\x1F\x5\b\x5\x2\x1F \a\f\x2\x2 !\x5\b"+
		"\x5\x2!$\x3\x2\x2\x2\"$\x5\b\x5\x2#\x1E\x3\x2\x2\x2#\"\x3\x2\x2\x2$\a"+
		"\x3\x2\x2\x2%\x30\a\x4\x2\x2&\x30\a\x3\x2\x2\'(\a\x5\x2\x2()\x5\n\x6\x2"+
		")*\a\x6\x2\x2*\x30\x3\x2\x2\x2+,\a\x5\x2\x2,-\x5\x2\x2\x2-.\a\x6\x2\x2"+
		".\x30\x3\x2\x2\x2/%\x3\x2\x2\x2/&\x3\x2\x2\x2/\'\x3\x2\x2\x2/+\x3\x2\x2"+
		"\x2\x30\t\x3\x2\x2\x2\x31\x32\b\x6\x1\x2\x32\x33\a\x5\x2\x2\x33\x34\x5"+
		"\n\x6\x2\x34\x35\a\x6\x2\x2\x35\x38\x3\x2\x2\x2\x36\x38\a\x3\x2\x2\x37"+
		"\x31\x3\x2\x2\x2\x37\x36\x3\x2\x2\x2\x38>\x3\x2\x2\x2\x39:\f\x5\x2\x2"+
		":;\t\x3\x2\x2;=\x5\n\x6\x6<\x39\x3\x2\x2\x2=@\x3\x2\x2\x2><\x3\x2\x2\x2"+
		">?\x3\x2\x2\x2?\v\x3\x2\x2\x2@>\x3\x2\x2\x2\b\x11\x1C#/\x37>";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SymbolicDifferentiation
